import numpy as np


# Define the vectors v1, v2, v3, v4
v1 = np.matrix([[1, 0, 3], [1, 0, -1]])
v2 = np.matrix([[0, -2, 1], [0, -1, 2]])
v3 = np.matrix([[1, 2, 3], [1, -2, -1]])
v4 = np.matrix([[1, -1, 3], [1, -1, 1]])

# Step 1: Perform Gram-Schmidt process
u1 = v1
proj_u1_v2 = (np.dot(v2, u1.T) / np.dot(u1, u1.T)) * u1
u2 = v2 - proj_u1_v2

proj_u1_v3 = (np.dot(v3, u1.T) / np.dot(u1, u1.T)) * u1
proj_u2_v3 = (np.dot(v3, u2.T) / np.dot(u2, u2.T)) * u2
u3 = v3 - proj_u1_v3 - proj_u2_v3

proj_u1_v4 = (np.dot(v4, u1.T) / np.dot(u1, u1.T)) * u1
proj_u2_v4 = (np.dot(v4, u2.T) / np.dot(u2, u2.T)) * u2
proj_u3_v4 = (np.dot(v4, u3.T) / np.dot(u3, u3.T)) * u3
u4 = v4 - proj_u1_v4 - proj_u2_v4 - proj_u3_v4

# Step 2: Normalize the vectors
e1 = u1 / np.linalg.norm(u1)
e2 = u2 / np.linalg.norm(u2)
e3 = u3 / np.linalg.norm(u3)
e4 = u4 / np.linalg.norm(u4)

# Step 3: Print the orthonormal basis
print("Orthonormal basis:")
print("e1:" )
display(e1)
print("e2:" )
display(e2)
print("e3:" )
display(e3)
print("e4:" )
display(e4)
